#!/usr/bin/python
#
# author: Brandon Griffin <brandon.k.griffin@gmail.com>
# ver:    0.1
# date:   12/1/13
#
#
#
# Project Euler:
#
# - Even Fibonacci Numbers -
#
# Each new term in the Fibonacci sequence is generated by adding the previous two terms.
# By starting with 1 and 2, the first 10 terms will be:
#
# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#
#
#
# By considering the terms in the Fibonacci sequence whose values do not exceed four million,
# find the sum of the even-valued terms.

class Fibonacci:
    """
        Fibonacci class.
        Represents operations that can occur on Fibonacci numbers.
    """
    # Fibonacci attributes.
    IsEven = False              # True if the current Fibonacci object Number attribute is even, false otherwise.
    StartNumber = 0             # The starting number for this Fibonacci sequence.
    EndNumber = 0               # The ending number for this Fibonacci sequence
    CurrentNumber = 0           # Current number in the Fibonacci sequence.
    FirstPreviousNumber = 0     # The first previous term in the Fibonacci sequence, with regard to the Number attribute.
    SecondPreviousNumber = 0    # The second previous term in the Fibonacci sequence, with regard to the Number attribute.
    
    # Overloaded Constructor.
    # Defaults to a starting number of 0.
    #
    # endNumber - The last number of the Fibonacci sequence you are working with.
    def __init__(self, endNumber):
        self.StartNumber = 1
        self.EndNumber = endNumber
        self.CurrentNumber = 1
        self.FirstPreviousNumber = 1
        self.SecondPreviousNumber = 0
        self.SumOfTerms = 1
        if self.CurrentNumber % 2 == 0:
            self.IsEven = True
        else:
            self.IsEven = False

    # Gets the next number in the Fibonacci sequence.
    def GetNextFibonacciNumber(self):
        # Assign numbers to temp values.
        secondPreviousNumber = self.FirstPreviousNumber
        firstPreviousNumber = self.CurrentNumber
        self.CurrentNumber =  firstPreviousNumber + secondPreviousNumber

        # Assign object's current attribute values.
        self.FirstPreviousNumber = firstPreviousNumber
        self.SecondPreviousNumber = secondPreviousNumber
        if self.CurrentNumber % 2 == 0:
            self.IsEven = True
        else:
            self.IsEven = False

    # Returns the sum of even Fibonacci numbers up to the Fibonacci EndNumber attribute.
    def SumOfEvenFinbonacciTerms(self):
        SumOfEvenTerms = 0
        
        # Looping through Fibonacci numbers until the EndNumber attribute.
        while self.CurrentNumber <= self.EndNumber:
            print("Current Number:" + str(self.CurrentNumber))
            if self.IsEven:
                SumOfEvenTerms += self.CurrentNumber
            self.GetNextFibonacciNumber()
                        
        return SumOfEvenTerms


# Main entry point.
def main():
    fibonacciSequence = Fibonacci(4000000)

    # Print the sum of the even terms.
    print ("Sum of Even Fibonacci Terms (up to " + str(fibonacciSequence.EndNumber) + "): " + str(fibonacciSequence.SumOfEvenFinbonacciTerms()))

if __name__ == "__main__":
    main()